/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.LabAssistantRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.Diagnostics;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DiagnosticsWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
/**
 *
* @author vidyavathipuli
 */
public class DiagnosticsWorkArea extends javax.swing.JPanel {

    private JPanel processContainerUser;
    private EcoSystem Business;
    private UserAccount accountUser;
    private Diagnostics Diagnostic;
    private Enterprise Enterprise;

    public DiagnosticsWorkArea(JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem business,Enterprise enterprise) {
        initComponents();

        this.processContainerUser = userProcessContainer;
        this.accountUser = account;
        this.Business = business;
        this.Enterprise=enterprise;
        this.Diagnostic = (Diagnostics) organization;
       

        initWorktable();

    }

    public void initWorktable() {
        DefaultTableModel model = (DefaultTableModel) tableWorkReq.getModel();
        model.setRowCount(0);
        for (WorkRequest request : Enterprise.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[6];
            row[1] = ((DiagnosticsWorkRequest) request).getPatient().getPatientName();
            row[2] = request.getSender().getEmployee().getName();
            row[3] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[4] = request.getStatus();
            row[0] = request;
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableWorkReq = new javax.swing.JTable();
        btnAsign = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jlDiagnosticDashBoard = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 204, 204));
        setMaximumSize(new java.awt.Dimension(1200, 800));
        setPreferredSize(new java.awt.Dimension(1200, 800));

        tableWorkReq.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableWorkReq.setForeground(new java.awt.Color(255, 0, 51));
        tableWorkReq.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Patient Name", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableWorkReq.setSelectionBackground(new java.awt.Color(255, 153, 153));
        tableWorkReq.setSelectionForeground(new java.awt.Color(255, 255, 51));
        jScrollPane1.setViewportView(tableWorkReq);
        if (tableWorkReq.getColumnModel().getColumnCount() > 0) {
            tableWorkReq.getColumnModel().getColumn(0).setResizable(false);
            tableWorkReq.getColumnModel().getColumn(1).setResizable(false);
            tableWorkReq.getColumnModel().getColumn(2).setResizable(false);
            tableWorkReq.getColumnModel().getColumn(3).setResizable(false);
            tableWorkReq.getColumnModel().getColumn(4).setResizable(false);
        }

        btnAsign.setBackground(new java.awt.Color(204, 204, 204));
        btnAsign.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        btnAsign.setText("Assign");
        btnAsign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAsignActionPerformed(evt);
            }
        });

        btnProcess.setBackground(new java.awt.Color(204, 204, 204));
        btnProcess.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        btnRefresh.setBackground(new java.awt.Color(204, 204, 204));
        btnRefresh.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        jlDiagnosticDashBoard.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jlDiagnosticDashBoard.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlDiagnosticDashBoard.setText("DIAGNOSTICS DASHBOARD");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAsign, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnRefresh)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 814, Short.MAX_VALUE)
                        .addComponent(jlDiagnosticDashBoard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAsign, btnProcess});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jlDiagnosticDashBoard)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRefresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAsign)
                    .addComponent(btnProcess))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAsign, btnProcess, btnRefresh});

    }// </editor-fold>//GEN-END:initComponents

    private void btnAsignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAsignActionPerformed

        int selectedRow = tableWorkReq.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null,"Please select the request to assign");
            return;
        }

        WorkRequest request = (WorkRequest) tableWorkReq.getValueAt(selectedRow, 0);
        if(request.getStatus().equalsIgnoreCase("pending")){
            JOptionPane.showMessageDialog(null,"This request is under process");
        }
        else if(request.getStatus().equalsIgnoreCase("Sent")){
        request.setReceiver(accountUser);
        request.setStatus("Pending");
        initWorktable();
        }
    }//GEN-LAST:event_btnAsignActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed

        int selectedRow = tableWorkReq.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null,"Please select the item from the list");
            return;
        }
 //save after validation
        DiagnosticsWorkRequest request = (DiagnosticsWorkRequest) tableWorkReq.getValueAt(selectedRow, 0);
        if(request.getStatus().equalsIgnoreCase("completed")){
            JOptionPane.showMessageDialog(null,"The request was processed ");
        }   
        else if(request.getStatus().equalsIgnoreCase("sent")){
            JOptionPane.showMessageDialog(null,"This request is not assigned to you");
        }
        else if(request.getStatus().equalsIgnoreCase("pending") && !request.getReceiver().getEmployee().getName().equals(accountUser.getEmployee().getName())){
            JOptionPane.showMessageDialog(null,"This request is in progress");
        }
        else{
        request.setStatus("Processing");

        ProcessDiagnostics processdiag = new ProcessDiagnostics(processContainerUser, request);
            System.out.println(request.getTests()+" +++++ Tests");
        processContainerUser.add("ProcessDiagnostics", processdiag);
        CardLayout layout = (CardLayout) processContainerUser.getLayout();
        layout.next(processContainerUser);
        }
    }//GEN-LAST:event_btnProcessActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        initWorktable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAsign;
    private javax.swing.JButton btnProcess;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jlDiagnosticDashBoard;
    private javax.swing.JTable tableWorkReq;
    // End of variables declaration//GEN-END:variables
}
