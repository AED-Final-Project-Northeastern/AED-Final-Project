/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.AdministrativeRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.OrganBank;
import Business.Network.Network;
import Business.Organization.Services;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.WorkQueue.MatchingWorkRequest;
import Business.WorkQueue.ProcurementWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shiva
 */
public class OrganManagement extends javax.swing.JPanel {

    /**
     * Creates new form OrganManagement
     */
     JPanel processContainerUser;
    OrganizationDirectory directoryOrganisation; 
    Enterprise Enterprise;
    EcoSystem ecosystem;
    Network Network;
    
    public OrganManagement(JPanel userProcessContainer, OrganizationDirectory organizationDirectory, Enterprise enterprise,EcoSystem ecoSystem,Network network) {
        initComponents();
        this.processContainerUser=userProcessContainer;
        this.directoryOrganisation=organizationDirectory;
        this.Enterprise=enterprise;
        this.ecosystem=ecoSystem;
        this.Network=network;
        
        initComponents();
        populateJTable();
        populateComboBox();
        match();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableOrganProcurementRequest = new javax.swing.JTable();
        buttonAssign = new javax.swing.JButton();
        comboFacalities = new javax.swing.JComboBox<>();
        buttonProcure = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableMatchingRequest = new javax.swing.JTable();
        jlOrganProcurementRequest = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jlMatchingOrgan = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 204, 204));
        setForeground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(1200, 800));
        setPreferredSize(new java.awt.Dimension(1200, 800));

        tableOrganProcurementRequest.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tableOrganProcurementRequest.setForeground(new java.awt.Color(255, 0, 51));
        tableOrganProcurementRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Patient Name", "Organs", "Doctor", "Comments", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableOrganProcurementRequest.setSelectionBackground(new java.awt.Color(255, 153, 153));
        tableOrganProcurementRequest.setSelectionForeground(new java.awt.Color(255, 255, 51));
        jScrollPane1.setViewportView(tableOrganProcurementRequest);

        buttonAssign.setBackground(new java.awt.Color(204, 204, 204));
        buttonAssign.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        buttonAssign.setText("Assign");
        buttonAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAssignActionPerformed(evt);
            }
        });

        comboFacalities.setBackground(new java.awt.Color(204, 204, 204));
        comboFacalities.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        comboFacalities.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboFacalities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFacalitiesActionPerformed(evt);
            }
        });

        buttonProcure.setBackground(new java.awt.Color(204, 204, 204));
        buttonProcure.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        buttonProcure.setText("Procure");
        buttonProcure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonProcureActionPerformed(evt);
            }
        });

        tableMatchingRequest.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tableMatchingRequest.setForeground(new java.awt.Color(255, 0, 51));
        tableMatchingRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Donor Patient", "Donor Doctor", "Organ", "Receiving patient", "Receiving Doctor", "Status"
            }
        ));
        jScrollPane2.setViewportView(tableMatchingRequest);

        jlOrganProcurementRequest.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jlOrganProcurementRequest.setText("Organ Procurement Requests : ");

        jButton1.setBackground(new java.awt.Color(204, 204, 204));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 0, 51));
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jlMatchingOrgan.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jlMatchingOrgan.setText("Organ Matching Requests : ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlMatchingOrgan)
                    .addComponent(jlOrganProcurementRequest)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(buttonProcure, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboFacalities, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(buttonAssign, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(199, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(53, 53, 53))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jlOrganProcurementRequest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonProcure, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboFacalities, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAssign))
                .addGap(12, 12, 12)
                .addComponent(jlMatchingOrgan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(382, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonProcureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonProcureActionPerformed
        // TODO add your handling code here:
         int selectedRow = tableOrganProcurementRequest.getSelectedRow();
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(null,"Please Select a row from table first", "Warining", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        ProcurementWorkRequest orgwr = (ProcurementWorkRequest)tableOrganProcurementRequest.getValueAt(selectedRow, 0);
        if(orgwr.getStatus().equalsIgnoreCase("procurement requested")) {
            orgwr.setStatus("Work Started");
           
        }
        
        
        
        else {
            JOptionPane.showMessageDialog(null, "Order is already ready Procured");
            return;
        }
        
         populateJTable();
    }//GEN-LAST:event_buttonProcureActionPerformed

    private void buttonAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAssignActionPerformed
        // TODO add your handling code here:
        
         if(comboFacalities.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Please select a Procurement Team");
            return;
        }
        int selectedRow = tableOrganProcurementRequest.getSelectedRow();
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(null,"Select request to assign Procurement", "Warining", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        ProcurementWorkRequest orgwr = (ProcurementWorkRequest)tableOrganProcurementRequest.getValueAt(selectedRow, 0);
        
        if(!orgwr.getStatus().equals("Work Started")){
        JOptionPane.showMessageDialog(null,"Request should be procured first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
      
        for(Organization orga  : directoryOrganisation.getOrganizationList()) {
           
           if( orga instanceof Services){
              
               if(orga.getOrganizationName().equalsIgnoreCase(comboFacalities.getSelectedItem().toString())){
                   orga.getWorkQueue().getWorkRequestList().add((ProcurementWorkRequest)tableOrganProcurementRequest.getValueAt(selectedRow, 0));
                   ((Services) orga).setCounter(1);
                   
               }
           }
           
            
        
    }
      orgwr.setStatus("Assigned");
      orgwr.setTeam(comboFacalities.getSelectedItem().toString());
      populateJTable();
      populateComboBox();
        
       
    }//GEN-LAST:event_buttonAssignActionPerformed

    private void comboFacalitiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFacalitiesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboFacalitiesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        processContainerUser.remove(this);
        CardLayout layout = (CardLayout) processContainerUser.getLayout();
        layout.previous(processContainerUser);
    }//GEN-LAST:event_jButton1ActionPerformed

    public void match(){
        DefaultTableModel model = (DefaultTableModel) tableMatchingRequest.getModel();
        model.setRowCount(0);
        
        for(Network n: ecosystem.getNetworkList()){
            if(n.getNetworkName().equalsIgnoreCase(Network.getNetworkName())) { 
                for(Enterprise e: n.getEnterpriseDirectory().getEnterpriseList()){
                    if(e instanceof OrganBank){
                        if(e.getWorkQueue()== null){
                            System.out.println("catched by repears");
                            break;
                        }
                        for(WorkRequest wr: e.getWorkQueue().getWorkRequestList()){
                            if(wr.getStatus().equalsIgnoreCase("procurement requested") ||wr.getStatus().equalsIgnoreCase("work started")|| wr.getStatus().equalsIgnoreCase("Assigned") ||wr.getStatus().equalsIgnoreCase("InProcess")|| wr.getStatus().equalsIgnoreCase("Completed")){
                            if(wr instanceof MatchingWorkRequest){  
                            MatchingWorkRequest opr = (MatchingWorkRequest)wr;
                      
                            Object[] row = new Object[6];
                            row[0] = opr.getDonpatient().getPatientName();
                            row[1] = opr.getDonpatient().getDoctor();
                            row[2] = opr.getOrgan();
                            row[3] = opr.getRecpatient().getPatientName();
                            row[4] = opr.getRecpatient().getDoctor();
                            row[5] = opr.getStatus();
                            model.addRow(row);
                            }
                        }
                    }
                }
            }
            }
        }     
    }
    
    
    private void populateJTable() {
       

        DefaultTableModel model = (DefaultTableModel) tableOrganProcurementRequest.getModel();
         model.setRowCount(0);
         for(Network n: ecosystem.getNetworkList()){

            if(n.getNetworkName().equalsIgnoreCase(Network.getNetworkName())) { 
            for(Enterprise e: n.getEnterpriseDirectory().getEnterpriseList()){
                if(e instanceof OrganBank){
                    if(e.getWorkQueue()== null){
                        System.out.println("catched by repears");
                      break;
                    }
                    for(WorkRequest wr: e.getWorkQueue().getWorkRequestList()){
                        if(wr.getStatus().equalsIgnoreCase("procurement requested") ||wr.getStatus().equalsIgnoreCase("work started")|| wr.getStatus().equalsIgnoreCase("Assigned") ||wr.getStatus().equalsIgnoreCase("InProcess")||wr.getStatus()==null|| wr.getStatus().equalsIgnoreCase("Completed")){
                            if(wr instanceof ProcurementWorkRequest){
                            ProcurementWorkRequest opr = (ProcurementWorkRequest)wr;
                            String a ="";
                            System.out.println("@@@@@@Organ List"+opr.getOrganList());
                            for( String s: opr.getOrganList()){
                                a= s+";"+a;
                            }
                            Object[] row = new Object[6];
                            row[0] = opr;
                            row[1] = opr.getPatient().getPatientName();
                            row[2] = a;
                            row[3] = opr.getPatient().getDoctor();
                            row[4] = opr.getMessage();
                            row[5] = opr.getStatus();
                            model.addRow(row);
                            }
                        }
                    }
                }
            }
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAssign;
    private javax.swing.JButton buttonProcure;
    private javax.swing.JComboBox<String> comboFacalities;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jlMatchingOrgan;
    private javax.swing.JLabel jlOrganProcurementRequest;
    private javax.swing.JTable tableMatchingRequest;
    private javax.swing.JTable tableOrganProcurementRequest;
    // End of variables declaration//GEN-END:variables



    private void populateComboBox() {
        
        comboFacalities.removeAllItems();
        comboFacalities.addItem("--Select--");
        for(Organization orga  : directoryOrganisation.getOrganizationList()) {
           
           if( orga instanceof Services){
               if(((Services) orga).getCounter()==0){
               comboFacalities.addItem(orga.getOrganizationName());}
           }
           
            
        
    }}
}
